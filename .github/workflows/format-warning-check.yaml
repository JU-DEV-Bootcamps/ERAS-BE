name: Enforce .editorconfig Rules and Check Build Warnings (Changed Files Only)

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  format-and-build-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure full history is fetched to compare changes

      # Step 2: Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0 # Specify the required .NET SDK version

      # Step 3: Fetch all branches
      - name: Fetch all branches
        run: git fetch --all

      # Step 4: Ensure the base branch is fetched
      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }}

      # Step 5: Get list of changed files
      - name: Get changed files
        id: changes
        run: |
          echo "Getting list of changed files..."
          git diff --name-only origin/${{ github.base_ref }} HEAD > changed-files.txt
          if [ -s changed-files.txt ]; then
            echo "CHANGED_FILES=$(cat changed-files.txt | tr '\n' ' ')" >> $GITHUB_ENV
          else
            echo "No changed files detected."
            echo "CHANGED_FILES=" >> $GITHUB_ENV
          fi

      # Step 6: Run dotnet format on the entire solution and capture output
      - name: Run dotnet format
        id: format
        run: |
          echo "Running dotnet format on the entire solution..."
          dotnet format --verify-no-changes > format-output.txt 2>/dev/null || true
          echo "FORMAT_ISSUES=$(cat format-output.txt | tr '\n' ' ' | sed 's/\"//g')" >> $GITHUB_ENV 2>/dev/null
        env:
          PATH: ${{ runner.tool_cache }}/dotnet:$PATH

      # Step 7: Build the project and capture warnings for changed files
      - name: Build the project
        id: build
        if: env.CHANGED_FILES != ''
        run: |
          echo "Building project for changed files..."
          dotnet build --configuration Release --no-restore /warnaserror > build-output.txt 2>/dev/null || true
          echo "BUILD_WARNINGS=$(cat build-output.txt | tr '\n' ' ' | sed 's/\"//g' | sed 's/:/ -/g')" >> $GITHUB_ENV 2>/dev/null
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      # Step 8: Final summary of changed files, format issues, and build warnings
      - name: Final Summary
        run: |
          echo "Final Summary:"
          echo "Changed Files:"
          echo "$CHANGED_FILES"
          echo ""

          echo "Format Issues:"
          if [ -n "$FORMAT_ISSUES" ]; then
            # Extract file names from CHANGED_FILES and filter FORMAT_ISSUES
            echo "$FORMAT_ISSUES" | grep -F -f <(echo "$CHANGED_FILES" | xargs -n1 basename) || echo "No format issues found for changed files."
          else
            echo "No format issues found."
          fi
          echo ""

          echo "Build Warnings:"
          if [ -n "$BUILD_WARNINGS" ]; then
            # Extract file names from CHANGED_FILES and filter BUILD_WARNINGS
            echo "$BUILD_WARNINGS" | grep -F -f <(echo "$CHANGED_FILES" | xargs -n1 basename) || echo "No build warnings found for changed files."
          else
            echo "No build warnings found."
          fi

      # Step 9: Fail the workflow if format issues or build warnings are found in changed files
      - name: Fail Workflow on Issues
        run: |
          echo "Checking for issues to fail the workflow..."

          # Check for format issues
          if [ -n "$FORMAT_ISSUES" ]; then
            FILTERED_FORMAT_ISSUES=$(echo "$FORMAT_ISSUES" | grep -F -f <(echo "$CHANGED_FILES" | xargs -n1 basename))
            if [ -n "$FILTERED_FORMAT_ISSUES" ]; then
              echo "Format issues detected:"
              echo "$FILTERED_FORMAT_ISSUES"
              echo "Failing the workflow due to format issues."
              exit 1
            fi
          fi

          # Check for build warnings
          if [ -n "$BUILD_WARNINGS" ]; then
            FILTERED_BUILD_WARNINGS=$(echo "$BUILD_WARNINGS" | grep -F -f <(echo "$CHANGED_FILES" | xargs -n1 basename))
            if [ -n "$FILTERED_BUILD_WARNINGS" ]; then
              echo "Build warnings detected:"
              echo "$FILTERED_BUILD_WARNINGS"
              echo "Failing the workflow due to build warnings."
              exit 1
            fi
          fi

          echo "No format issues or build warnings detected. Workflow will pass."
